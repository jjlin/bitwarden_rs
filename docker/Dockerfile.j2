# This file was generated using a Jinja2 template.
# Please make your changes in `Dockerfile.j2` and then `make` the individual Dockerfiles.

{% set build_stage_base_image = "rust:1.46" %}
{% if "alpine" in target_file %}
{%   if "amd64" in target_file %}
{%     set build_stage_base_image = "clux/muslrust:nightly-2020-10-02" %}
{%     set runtime_stage_base_image = "alpine:3.12" %}
{%     set pkg_arch = "" %}
{%     set triple = "x86_64-unknown-linux-musl" %}
{%   elif "arm32v7" in target_file %}
{%     set build_stage_base_image = "messense/rust-musl-cross:armv7-musleabihf" %}
{%     set runtime_stage_base_image = "balenalib/armv7hf-alpine:3.12" %}
{%     set pkg_arch = "" %}
{%     set triple = "armv7-unknown-linux-musleabihf" %}
{%   endif %}
{% elif "amd64" in target_file %}
{%   set runtime_stage_base_image = "debian:buster-slim" %}
{%   set pkg_arch = "" %}
{% elif "arm32v6" in target_file %}
{%   set runtime_stage_base_image = "balenalib/rpi-debian:buster" %}
{%   set pkg_arch = "armel" %}
{%   set triple = "arm-unknown-linux-gnueabi" %}
{%   set toolchain = "arm-linux-gnueabi" %}
{% elif "arm32v7" in target_file %}
{%   set runtime_stage_base_image = "balenalib/armv7hf-debian:buster" %}
{%   set pkg_arch = "armhf" %}
{%   set triple = "armv7-unknown-linux-gnueabihf" %}
{%   set toolchain = "arm-linux-gnueabihf" %}
{% elif "arm64v8" in target_file %}
{%   set runtime_stage_base_image = "balenalib/aarch64-debian:buster" %}
{%   set pkg_arch = "arm64" %}
{%   set triple = "aarch64-unknown-linux-gnu" %}
{%   set toolchain = "aarch64-linux-gnu" %}
{% endif %}
{% if pkg_arch == "" %}
{%   set pkg_arch_suffix = "" %}
{% else %}
{%   set pkg_arch_suffix = ":" + pkg_arch %}
{% endif %}
# Using multistage build:
# 	https://docs.docker.com/develop/develop-images/multistage-build/
# 	https://whitfin.io/speeding-up-rust-docker-builds/
####################### VAULT BUILD IMAGE  #######################
{% set vault_version = "2.16.1" %}
{% set vault_image_hash = "sha256:e40228f94cead5e50af6575fb39850a002dad146dab6836e5da5663e6d214303" %}
# This hash is extracted from the docker web-vault builds, and is preferred over simple tag because it's immutable.
# It can be viewed in multiple ways:
# - From https://hub.docker.com/repository/docker/bitwardenrs/web-vault/tags,
    click the tag name and the digest should be there.
# - From the console, with the following commands:
#     docker pull bitwardenrs/web-vault:v{{ vault_version }}
#     docker image inspect --format "{{ '{{' }}.RepoDigests}}" bitwardenrs/web-vault:v{{ vault_version }}
#
# - To do the opposite, and get the tag from the hash, you can do:
#     docker image inspect --format "{{ '{{' }}.RepoTags}}" bitwardenrs/web-vault@{{ vault_image_hash }}
FROM bitwardenrs/web-vault@{{ vault_image_hash }} as vault

########################## BUILD IMAGE  ##########################
FROM {{ build_stage_base_image }} as build

{% if "alpine" in target_file %}
# Alpine only works on SQlite
ARG DB=sqlite
{% else %}
# Debian-based builds support multidb
ARG DB=sqlite,mysql,postgresql
{% endif %}

# Build time options to avoid dpkg warnings and help with reproducible builds.
ENV DEBIAN_FRONTEND=noninteractive LANG=C.UTF-8 TZ=UTC TERM=xterm-256color

# Don't download rust docs
RUN rustup set profile minimal

{% if "alpine" in target_file %}
ENV USER "root"
ENV RUSTFLAGS='-C link-arg=-s'
{% elif "arm" in target_file %}
# Install required build libs for {{ pkg_arch }} architecture.
# To compile both mysql and postgresql we need some extra packages for both host arch and target arch
RUN sed 's/^deb/deb-src/' /etc/apt/sources.list > \
        /etc/apt/sources.list.d/deb-src.list \
    && dpkg --add-architecture {{ pkg_arch }} \
    && apt-get update \
    && apt-get install -y \
        --no-install-recommends \
        libssl-dev{{ pkg_arch_suffix }} \
        libc6-dev{{ pkg_arch_suffix }} \
        libpq5{{ pkg_arch_suffix }} \
        libpq-dev \
        libmariadb-dev{{ pkg_arch_suffix }} \
        libmariadb-dev-compat{{ pkg_arch_suffix }}

{% endif -%}

{% if "alpine" not in target_file and "amd64" not in target_file %}
RUN apt-get update \
    && apt-get install -y \
        --no-install-recommends \
        gcc-{{ toolchain }} \
    && mkdir -p ~/.cargo \
    && echo '[target.{{ triple }}]' >> ~/.cargo/config \
    && echo 'linker = "{{ toolchain }}-gcc"' >> ~/.cargo/config \
    && echo 'rustflags = ["-L/usr/lib/{{ toolchain }}"]' >> ~/.cargo/config

ENV CARGO_HOME "/root/.cargo"
ENV USER "root"
{% endif %}
{% if "amd64" in target_file and "alpine" not in target_file %}
# Install DB packages
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    libmariadb-dev{{ pkg_arch_suffix }} \
    libpq-dev{{ pkg_arch_suffix }} \
    && rm -rf /var/lib/apt/lists/*
{% endif %}

# Creates a dummy project used to grab dependencies
RUN USER=root cargo new --bin /app
WORKDIR /app

# Copies over *only* your manifests and build files
COPY ./Cargo.* ./
COPY ./rust-toolchain ./rust-toolchain
COPY ./build.rs ./build.rs

{% if "alpine" in target_file %}
RUN rustup target add {{ triple }}
{% elif "arm" in target_file %}
# NOTE: This should be the last apt-get/dpkg for this stage, since after this it will fail because of broken dependencies.
# For Diesel-RS migrations_macros to compile with MySQL/MariaDB we need to do some magic.
# We at least need libmariadb3:amd64 installed for the x86_64 version of libmariadb.so (client)
# We also need the libmariadb-dev-compat:amd64 but it can not be installed together with the
# {{ pkg_arch_suffix }} version.
# What we can do is a force install, because nothing important is overlapping each other.
RUN apt-get install -y libmariadb3:amd64 && \
    mkdir -pv /tmp/dpkg && \
    cd /tmp/dpkg && \
    apt-get download libmariadb-dev-compat:amd64 && \
    dpkg --force-all -i *.deb && \
    rm -rf /tmp/dpkg

# For Diesel-RS migrations_macros to compile with PostgreSQL we need to do some magic.
# libpq5{{ pkg_arch_suffix }} doesn't provide a symlink to libpq.so.5 with the name libpq.so;
# this symlink is provided by libpq-dev, but it can't be installed for both arches at the same time.
# Without this specific file the ld command will fail and compilation fails with it.
RUN ln -sfnr /usr/lib/{{ toolchain }}/libpq.so.5 /usr/lib/{{ toolchain }}/libpq.so

ENV CC_{{ triple.replace('-', '_') }}="/usr/bin/{{ toolchain }}-gcc"
ENV CROSS_COMPILE="1"
ENV OPENSSL_INCLUDE_DIR="/usr/include/{{ toolchain }}"
ENV OPENSSL_LIB_DIR="/usr/lib/{{ toolchain }}"
RUN rustup target add {{ triple }}
{% endif %}

# Builds your dependencies and removes the
# dummy project, except the target folder
# This folder contains the compiled dependencies
{% if "amd64" in target_file and "alpine" not in target_file %}
RUN cargo build --features ${DB} --release
{% else %}
RUN cargo build --features ${DB} --release --target={{ triple }}
{% endif %}
RUN find . -not -path "./target*" -delete

# Copies the complete project
# To avoid copying unneeded files, use .dockerignore
COPY . .

# Make sure that we actually build the project
RUN touch src/main.rs

# Builds again, this time it'll just be
# your actual source files being built
{% if "amd64" in target_file and "alpine" not in target_file %}
RUN cargo build --features ${DB} --release
{% else %}
RUN cargo build --features ${DB} --release --target={{ triple }}
{% endif %}

######################## RUNTIME IMAGE  ########################
# Create a new stage with a minimal image
# because we already have a binary built
FROM {{ runtime_stage_base_image }}

ENV ROCKET_ENV "staging"
ENV ROCKET_PORT=80
ENV ROCKET_WORKERS=10
{% if "alpine" in runtime_stage_base_image %}
ENV SSL_CERT_DIR=/etc/ssl/certs
{% endif %}

{% if "amd64" not in target_file %}
RUN [ "cross-build-start" ]

{% endif %}
# Install needed libraries
{% if "alpine" in runtime_stage_base_image %}
RUN apk add --no-cache \
        openssl \
        curl \
{%   if "sqlite" in target_file %}
        sqlite \
{%   elif "mysql" in target_file %}
        mariadb-connector-c \
{%   elif "postgresql" in target_file %}
        postgresql-libs \
{%   endif %}
        ca-certificates
{% else %}
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    openssl \
    ca-certificates \
    curl \
    sqlite3 \
    libmariadb-dev-compat \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*
{% endif %}
{% if "alpine" in target_file and "arm32v7" in target_file %}
RUN apk add --no-cache -X http://dl-cdn.alpinelinux.org/alpine/edge/community catatonit
{% endif %}

RUN mkdir /data
{% if "amd64" not in target_file %}

RUN [ "cross-build-end" ]

{% endif %}
VOLUME /data
EXPOSE 80
EXPOSE 3012

# Copies the files from the context (Rocket.toml file and web-vault)
# and the binary from the "build" stage to the current stage
COPY Rocket.toml .
COPY --from=vault /web-vault ./web-vault
{% if "amd64" in target_file and "alpine" not in target_file %}
COPY --from=build app/target/release/bitwarden_rs .
{% else %}
COPY --from=build /app/target/{{ triple }}/release/bitwarden_rs .
{% endif %}

COPY docker/healthcheck.sh /healthcheck.sh
COPY docker/start.sh /start.sh

HEALTHCHECK --interval=60s --timeout=10s CMD ["/healthcheck.sh"]

# Configures the startup!
WORKDIR /
{% if "alpine" in target_file and "arm32v7" in target_file %}
CMD ["catatonit", "/start.sh"]
{% else %}
CMD ["/start.sh"]
{% endif %}
